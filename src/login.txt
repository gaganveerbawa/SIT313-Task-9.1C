import './Login.css'
import { useState } from "react"
import { Link, useNavigate } from 'react-router-dom'
import { signInWithGooglePopup, createuserdocfromAuth, signinAuthUserWithEmailAndPassword } from './utils/firebase'
import { getAuth, signOut } from "firebase/auth";


function Login() {
  const home = useNavigate();

  const [currentUser, setCurrentUser] = useState(null);

  const userlogGoogle = async () => {
    try {
      const { user } = await signInWithGooglePopup()
      if (user) {
        setCurrentUser(user);
        const userDocRef = await createuserdocfromAuth(user)
        console.log(userDocRef);
        // home('/');
      }
    } catch (error) {
      if (error.code === 'auth/popup-closed-by-user') {
        alert('Error signing in with Google. Please try again.');
      } else {
        console.error('Error signing in with Google:', error.message);
      }
    }
  }

  const [contact, setcontact] = useState({
    email: '',
    password: ''
  })

  const { email, password } = contact
  console.log(contact)

  async function handleClick(event) {

    if (event.target.className == 'loginbutton') {
      if (!email.trim() || !password.trim()) {
        alert('Both email and password fields are required.');
        return;
      }
    }
    try {
      const response = await signinAuthUserWithEmailAndPassword(email, password);
      console.log(response);
       if (response)
       setCurrentUser(response);
      //   home('/')
    }
    catch (error) {
      console.log('error in login', error.message);

      if (error.message.includes('invalid-login-credentials')) {
        alert('Invalid login credentials. Please try again.');
      }
    }
  }
  function handlepass(event) {
    const value = event.target.value
    const name = event.target.name

    setcontact((prevalue) => {
      return {
        ...prevalue,
        [name]: value

      }
    })
  }

  const handleSignOut = async () => {
    const auth = getAuth();
    try {
      await signOut(auth);
      alert('Signed out successfully.');
      setCurrentUser(null);  // Reset the user's state
       home('/');  
    } catch (error) {
      console.error('Error signing out:', error.message);
    }
  }

  const displaySignOut = () => {
    if (currentUser) {
      console.log("Display SignOut called with currentUser:", currentUser);

      return (
        <div>
          <h4 style={{color: 'red', fontWeight: 'bolder', textAlign: 'center'}}>Currently logged in as: {currentUser.user.email}</h4>
          <button className='loginbutton' onClick={handleSignOut}>
            Sign Out
          </button>
        </div>
      );
    }
    return null; // return nothing if the user isn't logged in
  };

  return (
    <>
      <div className='parent'>

        <div className="login-container">
          <Link to='/signup' className='signupbutton'>
            Sign Up
          </Link>
          {/* <Link to='/' className='backbutton' onClick={handleClick}>
            Back
          </Link> */}
          <br />
          <label>Your email</label>
          <br />
          <input className='logininput'
            name='email'
            type='email'
            onChange={handlepass}
          />
          <br />
          <label>Your password</label>
          <br />
          <input className='logininput'
            name='password'
            type='password'
            onChange={handlepass}
          />
          <br />

          <button className='loginbutton' onClick={handleClick}>
            Login
          </button>
          <br></br>
          <button className='loginbutton' onClick={userlogGoogle}>
            Login with Google
          </button>

          <br></br>
          <br />
          {displaySignOut()}
        </div>
      </div>
    </>
  )
}
export default Login